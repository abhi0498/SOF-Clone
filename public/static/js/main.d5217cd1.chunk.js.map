{"version":3,"sources":["context/auth-context.js","pages/Auth.jsx","pages/Home.jsx","pages/Questions.jsx","pages/AddQuestion.jsx","pages/Question.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["React","createContext","token","userID","login","logout","Auth","useState","displayError","setDisplayError","pageState","setPageState","emailID","setEmailID","password","setPassword","error","setError","context","useContext","AuthContext","className","onSubmit","e","console","log","preventDefault","trim","length","reqBody","query","fetch","method","body","JSON","stringify","headers","then","res","json","errors","message","setTimeout","data","sessionStorage","setItem","tokenExpiration","catch","err","htmlFor","onChange","target","value","type","id","aria-describedby","role","onClick","Home","Questions","props","questions","setQuestions","isLoading","setIsLoading","title","setTitle","text","setText","askQuestionOpen","setAskQuestionOpen","submitted","setsubmitted","useEffect","content","map","question","key","_id","to","style","transition","aria-label","aria-hidden","alert","rows","AddQuestion","Question","useParams","answers","setAnswers","answered","setAnswered","forEach","answer","creator","createdAt","disabled","Navbar","App","settoken","setuserID","getItem","Provider","removeItem","path","component","AuthPage","exact","from","QuestionsPage","AskQuestion","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5217cd1.chunk.js","sourcesContent":["import React from 'react'\n\nexport default React.createContext({\n    token: null,\n    userID: null,\n    login: () => { },\n    logout: () => { }\n})","import React, { useState, useContext } from 'react';\nimport AuthContext from '../context/auth-context'\nimport '../css/auth.css'\n\nconst Auth = () => {\n    const [displayError, setDisplayError] = useState(false)\n    const [pageState, setPageState] = useState('login')\n    const [emailID, setEmailID] = useState('');\n    const [password, setPassword] = useState('')\n    const [error, setError] = useState('')\n\n    const context = useContext(AuthContext);\n\n    const changePageState = () => {\n        if (pageState === 'login') setPageState('signup')\n        else setPageState('login')\n    }\n    const login = (e) => {\n        context.token = 'a'\n        console.log(context);\n        e.preventDefault()\n        if (emailID.trim().length === 0 || password.trim().length === 0) {\n            return\n        }\n        let reqBody = {\n            query: `\n        mutation{\n            signUp(UserData:{email:\"${emailID}\",password:\"${password}\"})\n        }`}\n\n        if (pageState === 'login') {\n            reqBody = {\n                query: `\n            query{\n                login(UserData:{email:\"${emailID}\",password:\"${password}\"}){\n                    userID\n                    tokenExpiration\n                    token\n                }\n            }`}\n        }\n\n        fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(reqBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                return res.json()\n            })\n            .then(res => {\n                console.log(res);\n\n                console.log(res);\n                if (res.errors) {\n                    setError(res.errors[0].message)\n                    setDisplayError(true)\n                    setTimeout(() => {\n                        setDisplayError(false)\n                    }, 3000);\n                }\n                else {\n                    setError('')\n                    setDisplayError(false)\n                }\n                if (res.data.login.token) {\n                    sessionStorage.setItem('token', res.data.login.token);\n                    sessionStorage.setItem('userID', res.data.login.userID);\n                    sessionStorage.setItem('tokenExpiration', res.data.login.tokenExpiration);\n                    context.login(res.data.login.token, res.data.login.userID, res.data.login.tokenExpiration)\n                }\n                console.log(res.errors);\n                console.log(res);\n\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n    return (\n        <div>\n            <h1>{pageState !== 'login' ? 'SignUp' : 'Login'}</h1>\n            <form className='container' onSubmit={login}>\n                <div className=\"w-50 mr-auto\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"emailID\">Email address</label>\n                        <input onChange={(e) => {\n                            setEmailID(e.target.value)\n                        }} type=\"email\" className=\"form-control\" id=\"emailID\" aria-describedby=\"emailHelp\" />\n                        <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input onChange={(e) => {\n                            setPassword(e.target.value)\n                        }} type=\"password\" className=\"form-control\" id=\"password\" />\n                    </div>\n                    <p className={`alert alert-danger ${displayError ? '' : 'd-none'}`} role=\"alert\">\n                        {error}</p>\n                    <div className=\"d-flex justify-content-around mt-5\">\n                        <button className=\"btn btn-primary\">{pageState !== 'login' ? 'SignUp' : 'Login'}</button>\n                    </div>\n                    <p onClick={changePageState} >Go to {pageState === 'login' ? 'SignUp' : 'Login'} Page</p>\n                </div>\n            </form>\n\n\n\n        </div >\n    );\n}\n\nexport default Auth;\n","import React from 'react';\n\nconst Home = () => {\n    return (\n        <div>\n            <h1>Home</h1>\n        </div>\n    );\n}\n\nexport default Home;\n","import React, { useState, useEffect, useContext } from 'react'\nimport AuthContext from '../context/auth-context'\n\nimport { Link } from 'react-router-dom'\n\nconst Questions = props => {\n    const [questions, setQuestions] = useState([])\n    const [isLoading, setIsLoading] = useState(true);\n\n    const [title, setTitle] = useState('');\n    const [text, setText] = useState('')\n    const [askQuestionOpen, setAskQuestionOpen] = useState(false);\n    const [submitted, setsubmitted] = useState(false)\n    const context = useContext(AuthContext)\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        setsubmitted(!submitted)\n        alert(\"Question submitted\")\n        setAskQuestionOpen(false)\n        let reqBody = {\n            query: `\n            mutation{\n                askQuestion(QuestionData:{title:\"${title}\",text:\"${text}\"})\n              }`}\n\n\n\n        fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(reqBody),\n            headers: {\n                'Authorization': 'Bearer ' + context.token,\n                'Content-Type': 'application/json',\n\n            },\n        })\n            .then(res => {\n                console.log(res);\n                return res.json()\n            })\n            .then(json => {\n                console.log(json);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n\n    }\n\n    useEffect(() => {\n        console.log('useeffect');\n        const reqBody = {\n            query: `\n        query{\n            questions{\n                _id\n                title\n            }\n        }`}\n\n        fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(reqBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                return res.json()\n            })\n            .then(json => {\n                setQuestions(json.data.questions)\n                setIsLoading(false)\n            })\n            .catch(err => {\n                console.log(err);\n            })\n\n\n    }, [submitted])\n\n\n    let content = <h1>Is Loading...</h1>\n    if (!isLoading) {\n        content = questions.map(question => {\n            return <div key={question._id}>\n                <h1>{question.title}</h1>\n                <Link to={`/questions/${question._id}`}>View Question</Link>\n            </div >\n        })\n    }\n    return (\n        <div>\n            <h1>Questions</h1>\n            <div className='container' style={{ transition: 'height 2s' }}>\n                {!askQuestionOpen && (<button onClick={() => {\n                    setAskQuestionOpen(true)\n                }}>Open </button>)}\n                {askQuestionOpen && (\n                    <   >\n                        <div className='d-flex justify-content-start align-items-center'>\n                            <h3>Ask your Question</h3>\n                            <button onClick={() => {\n                                setAskQuestionOpen(false)\n                            }} type=\"button\" className=\"close ml-5 mb-1\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n\n                        <form className='container' onSubmit={submitHandler}>\n                            <div className=\"w-50 mr-auto\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"emailID\">Title</label>\n                                    <input onChange={(e) => {\n                                        setTitle(e.target.value)\n                                    }} type=\"text\" className=\"form-control\" id=\"title\" />\n                                </div>\n\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"text\">Text</label>\n                                    <textarea onChange={(e) => {\n                                        setText(e.target.value)\n                                    }} className=\"form-control\" id=\"text\" rows=\"3\"></textarea>\n                                </div>\n\n                                <button>Submit</button>\n                            </div>\n                        </form>\n                    </>)}\n            </div>s\n            <Link to='questions/ask'>Ask</Link>\n\n            {content}\n        </div>\n    )\n\n}\n\nexport default Questions;\n","import React, { useState, useContext } from 'react'\nimport AuthContext from '../context/auth-context'\n\n\nconst AddQuestion = () => {\n    const [title, setTitle] = useState('');\n    const [text, setText] = useState('')\n    const [askQuestionOpen, setAskQuestionOpen] = useState(false);\n    const context = useContext(AuthContext)\n    const submitHandler = (e) => {\n        e.preventDefault()\n        let reqBody = {\n            query: `\n            mutation{\n                askQuestion(QuestionData:{title:\"${title}\",text:\"${text}\"})\n              }`}\n\n\n\n        fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(reqBody),\n            headers: {\n                'Authorization': 'Bearer ' + context.token,\n                'Content-Type': 'application/json',\n\n            },\n        })\n            .then(res => {\n                console.log(res);\n                return res.json()\n            })\n            .then(json => {\n                console.log(json);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n\n    }\n\n    return (\n        <div className='container' style={{ transition: 'height 2s' }}>\n            {!askQuestionOpen && (<button onClick={() => {\n                setAskQuestionOpen(true)\n            }}>Open </button>)}\n            {askQuestionOpen && (\n                <   >\n                    <div className='d-flex justify-content-start align-items-center'>\n                        <h3>Ask your Question</h3>\n                        <button onClick={() => {\n                            setAskQuestionOpen(false)\n                        }} type=\"button\" className=\"close ml-5 mb-1\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n\n                    <form className='container' onSubmit={submitHandler}>\n                        <div className=\"w-50 mr-auto\">\n                            <div className=\"form-group\">\n                                <label htmlFor=\"emailID\">Title</label>\n                                <input onChange={(e) => {\n                                    setTitle(e.target.value)\n                                }} type=\"text\" className=\"form-control\" id=\"title\" />\n                            </div>\n\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"text\">Text</label>\n                                <textarea onChange={(e) => {\n                                    setText(e.target.value)\n                                }} className=\"form-control\" id=\"text\" rows=\"3\"></textarea>\n                            </div>\n\n                            <button>Submit</button>\n                        </div>\n                    </form>\n                </>)}\n        </div>\n    )\n}\n\nexport default AddQuestion;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useParams } from 'react-router-dom'\nimport AuthContext from \"../context/auth-context\";\n\nconst Question = () => {\n    const context = useContext(AuthContext);\n    const { id } = useParams()\n    const [text, setText] = useState('');\n    const [questions, setQuestions] = useState([])\n    const [answers, setAnswers] = useState([])\n    const [answered, setAnswered] = useState(false)\n\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [submitted, setsubmitted] = useState([]);\n    const submitHandler = (e) => {\n        e.preventDefault()\n        let reqBody = {\n            query: `\n            mutation{\n                answerQuestion(AnswerData:{text:\"${text}\",questionID:\"${id}\"})\n              }`}\n        fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(reqBody),\n            headers: {\n                'Authorization': 'Bearer ' + context.token,\n                'Content-Type': 'application/json',\n\n            },\n        })\n            .then(res => {\n                console.log(res);\n                return res.json()\n            })\n            .then(json => {\n                console.log(json);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        setsubmitted(!submitted)\n    }\n    useEffect(() => {\n\n        console.log('useEffect');\n\n        const reqBody = {\n            query: `\n        query{\n            question(id:\"${id}\"){\n                _id\n                title\n                text\n                creator{\n                    email\n                }\n                createdAt\n                answers{\n                    _id\n                        creator{\n                            _id \n                            email\n                        }\n                        text\n                }\n            }\n        }`}\n\n        fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(reqBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                return res.json()\n            })\n            .then(json => {\n                setQuestions(json.data.question)\n                setAnswers(json.data.question.answers)\n                setIsLoading(false)\n                console.log(json.data)\n                answers.forEach(answer => {\n                    if (answer.creator._id === context.userID) {\n                        setAnswered(true)\n                    }\n                })\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }, [submitted])\n    return (\n        <div>\n            {isLoading && (<h1>Loading</h1>)}\n            {!isLoading &&\n                (<div>\n                    <h1>{questions.title}</h1>\n                    <p> Asked On {questions.createdAt}</p>\n                    <p>{questions.text}</p>\n\n\n                    <div className='d-flex justify-content-start align-items-center'>\n                        <h3>Answer this Question</h3>\n\n                    </div>\n\n                    <form className='container' onSubmit={submitHandler}>\n                        <div className=\"w-50 mr-auto\">\n                            <div className=\"form-group\">\n                                <label htmlFor=\"text\">Text</label>\n                                <textarea onChange={(e) => {\n                                    setText(e.target.value)\n                                }} className=\"form-control\" id=\"text\" rows=\"3\"></textarea>\n                            </div>\n\n                            <button disabled={answered}>Submit</button>\n                        </div>\n                    </form>\n                    <div>\n                        <h3>Answers</h3>\n                        {answers.map(answer => (\n                            <div key={answer._id}>\n                                <p>{answer.text}</p>\n                                <p>{answer.createdAt}</p>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default Question;\n","import React, { useContext } from 'react';\nimport AuthContext from \"../context/auth-context\";\nimport { NavLink } from 'react-router-dom'\n\nconst Navbar = () => {\n    const context = useContext(AuthContext)\n    return (\n        < >\n            <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\n                <div className=\"navbar-brand\">SF CLone</div>\n\n                <div className=\"navbar-nav ml-sm-auto\">\n                    {context.token && (<li className=\"nav-item nav-link\"><NavLink to='/questions'>Questions</NavLink></li>)}\n\n                    {!context.token && (<li className=\"nav-item nav-link\"><NavLink to='/auth'>Login</NavLink></li>)}\n                    {context.token && (<li onClick={context.logout} className=\"nav-item nav-link\"><NavLink to='/auth'>Logout</NavLink></li>)}\n\n                </div>\n            </nav>\n\n        </>\n    );\n}\n\nexport default Navbar;\n","import React, { useState, useEffect } from 'react';\nimport './css/bootstrap.min.css';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom'\nimport AuthPage from './pages/Auth'\nimport HomePage from './pages/Home'\nimport QuestionsPage from './pages/Questions'\nimport AskQuestion from './pages/AddQuestion'\nimport Question from './pages/Question'\n\n\nimport Navbar from './components/Navbar';\n\nimport AuthContext from \"./context/auth-context\";\n\n\n\nfunction App() {\n\n  const [token, settoken] = useState(null);\n  const [userID, setuserID] = useState(null);\n\n  const login = (token, userID, tokenExpiration) => {\n    settoken(token)\n    setuserID(userID)\n  }\n  const logout = () => {\n    settoken(null)\n    setuserID(null)\n    sessionStorage.removeItem('token')\n    sessionStorage.removeItem('tokenExpiration')\n    sessionStorage.removeItem('userID')\n\n  }\n  useEffect(() => {\n\n    if (sessionStorage.getItem('token')) {\n      login(sessionStorage.getItem('token'), sessionStorage.getItem('userID'), sessionStorage.getItem('tokenExpiration'))\n\n    }\n\n  }, [])\n\n  return (\n    <BrowserRouter>\n      <>\n        <AuthContext.Provider value={{ token: token, userID: userID, login: login, logout: logout }}>\n          <Navbar />\n          <Switch>\n\n            {!token && (<Route path='/auth' component={AuthPage} exact />)}\n\n\n\n            {token && (<Redirect from='/auth' to='/questions' component={QuestionsPage} exact />)}\n            {!token && (<Redirect from='/' to='/auth' component={AuthPage} />)}\n            <Route path='/questions' component={QuestionsPage} exact />\n            <Route path='/questions/ask' component={AskQuestion} exact />\n            <Route path='/questions/:id' component={Question} exact />\n\n\n            <Route path='/' component={\n              HomePage\n            } />\n\n\n\n\n\n\n\n          </Switch>\n        </AuthContext.Provider>\n      </>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}